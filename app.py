import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Attempt to import CadQuery and visualization, mark availability
try:
    import cadquery as cq
    from cadquery import exporters
    from cadquery import show
    CADQUERY_AVAILABLE = True
except ImportError:
    CADQUERY_AVAILABLE = False

# Linear interpolation helper
def linear_interpolate(x_vals, y_vals, x):
    x_vals = np.array(x_vals)
    y_vals = np.array(y_vals)
    return np.interp(x, x_vals, y_vals)

def get_profile_points(default_points=None):
    with st.expander("Taper Profile Points"):
        #st.write("### Enter taper profile points (position in inches and diameter in inches)")

        if default_points is None:
            default_points = [(0.0, 0.840), (14.5, 0.65), (29.0, 0.508)]

        # Let user select number of points
        num_points = st.number_input("Number of points", min_value=2, max_value=20, value=len(default_points), step=1)

        positions = []
        diameters = []

        for i in range(num_points):
            col1, col2 = st.columns(2)
            with col1:
                pos = st.number_input(f"Point {i+1} position (inches)", value=default_points[i][0] if i < len(default_points) else 0.0, format="%.4f", step=0.01)
            with col2:
                dia = st.number_input(f"Point {i+1} diameter (inches)", value=default_points[i][1] if i < len(default_points) else 0.0, format="%.4f", step=0.01)

            positions.append(pos)
            diameters.append(dia)

        # Validate: positions must be strictly increasing
        if any(earlier >= later for earlier, later in zip(positions, positions[1:])):
            st.error("Positions must be in strictly increasing order.")
            return None

        # Validate: diameters positive and reasonable
        if any(d <= 0 for d in diameters):
            st.error("Diameters must be positive numbers.")
            return None

        profile_points = list(zip(positions, diameters))
        return profile_points


# Matplotlib-based 3D visualization fallback
def plot_mpl_3d(profile_points, taper_length):
    profile_points = sorted(profile_points, key=lambda p: p[0])
    x_vals, diameters = zip(*profile_points)
    x_fine = np.linspace(0, taper_length, 500)
    radii = np.interp(x_fine, x_vals, diameters) / 2

    theta = np.linspace(0, 2 * np.pi, 60)
    X, Theta = np.meshgrid(x_fine, theta)
    R = np.tile(radii, (len(theta), 1))

    Y = R * np.cos(Theta)
    Z = R * np.sin(Theta)

    fig = plt.figure(figsize=(10, 6))
    ax = fig.add_subplot(111, projection='3d')
    ax.plot_surface(X, Y, Z, color='lightblue', edgecolor='k', alpha=0.7)

    max_range = np.max([X.max() - X.min(), Y.max() - Y.min(), Z.max() - Z.min()]) / 2
    mid_x = (X.max() + X.min()) / 2
    mid_y = (Y.max() + Y.min()) / 2
    mid_z = (Z.max() + Z.min()) / 2
    ax.set_xlim(mid_x - max_range, mid_x + max_range)
    ax.set_ylim(mid_y - max_range, mid_y + max_range)
    ax.set_zlim(mid_z - max_range, mid_z + max_range)

    ax.set_xlabel('Axial Length (inches)')
    ax.set_ylabel('Radius Y (inches)')
    ax.set_zlabel('Radius Z (inches)')
    ax.set_title('Tapered Shaft Model (Matplotlib)')
    return fig

# CadQuery model builder
def build_cq_model(profile_points, taper_length, finish_diameter, start_diameter, tail_extension, head_extension):
    profile_points = sorted(profile_points, key=lambda p: p[0])
    x_vals, diameters = zip(*profile_points)
    diam_list = list(diameters)
    if diam_list[0] < finish_diameter:
        diam_list[0] = finish_diameter

    xs = [-tail_extension] + list(x_vals) + [taper_length + head_extension]
    rs = [diam_list[0] / 2] + [d / 2 for d in diam_list] + [diam_list[-1] / 2]

    points = list(zip(xs, rs))
    wp = cq.Workplane("XZ").polyline(points).line(xs[-1], 0).line(xs[0], 0).close()
    solid = wp.revolve(360)
    return solid

# Generate G-code text
def generate_gcode(profile_points, tool_diameter, feed_rate_ipm, pass_depth_in, start_diameter, finish_diameter, 
                   taper_length, tail_extension, head_extension, safe_clearance, step, verbose):

    x_vals, diameters = zip(*sorted(profile_points))
    diam_list = list(diameters)
    if diam_list[0] < finish_diameter:
        diam_list[0] = finish_diameter

    total_length = tail_extension + taper_length + head_extension
    passes = int(np.ceil((start_diameter - finish_diameter) / (2 * pass_depth_in)))
    positions = np.linspace(total_length, -tail_extension, int(total_length / step) + 1)
    tool_radius = tool_diameter / 2
    original_profile_points = sorted(profile_points, key=lambda p: p[0])
    spindle_speed = 300

    header_lines = [
        "CNC Taper Cutting G-code generated by Phil Prentice",
        "Email: pipcues@gmail.com",
        "",
        f"Starting dowel diameter: {start_diameter:.4f}\"",
        f"Taper length: {taper_length:.4f}\"",
        f"Tailstock extension: {tail_extension:.4f}\"",
        f"Headstock extension: {head_extension:.4f}\"",
        f"Finish joint diameter: {finish_diameter:.4f}\"",
        f"Pass depth (radial per pass): {pass_depth_in:.4f}\"",
        f"Total passes: {passes}",
        f"Tool diameter: {tool_diameter:.4f}\"",
        f"Feed rate: {feed_rate_ipm} ipm",
        f"Spindle speed: 300 rpm",
        "",
        "Original taper profile points (X in inches, Diameter in inches):"
    ]

    for px, pd in original_profile_points:
        header_lines.append(f"  X={px:6.2f}\"   Diameter={pd:7.4f}\"")

    header_lines.extend([
        "",
        "Description:",
        "This program will machine a taper along the shaft based",
        "on the specified profile points. It will limit cutting",
        "so that the joint diameter finishes at the user-specified",
        "diameter, ensuring no overcut on the joint section.",
        "The taper is performed in multiple passes removing the",
        "specified pass depth radially each time."
    ])

    max_len = max(len(line) for line in header_lines)
    field_width = max_len + 2

    lines = []
    lines.append('%')
    lines.append('(************************************************************)')
    for line_text in header_lines:
        lines.append('( * {:<{width}})'.format(line_text, width=field_width))
    lines.append('(************************************************************)')
    lines.append('')

    lines.append('G20  ; Units in inches')
    lines.append('G90  ; Absolute positioning')
    lines.append('G94  ; Feed per minute mode')
    lines.append(f'M03 S{spindle_speed}  ; Spindle on clockwise')
    lines.append('')

    #lines = []
    #width = 60
    #lines.append("%")
    #lines.append("*" * width)
    #lines.append(f"*{'Magni CNC Taper Generator':^{width - 2}}*")
    #lines.append("*" * width)
    #lines.append(f"* Start Diameter: {start_diameter:.4f} inches".ljust(width - 1) + "*")
    #lines.append(f"* Finish Diameter: {finish_diameter:.4f} inches".ljust(width - 1) + "*")
    #lines.append(f"* Taper Length: {taper_length:.4f} inches".ljust(width - 1) + "*")
    #lines.append(f"* Tailstock Extension: {tail_extension:.4f} inches".ljust(width - 1) + "*")
    #lines.append(f"* Headstock Extension: {head_extension:.4f} inches".ljust(width - 1) + "*")
    #lines.append(f"* Tool Diameter: {tool_diameter:.4f} inches".ljust(width - 1) + "*")
    #lines.append(f"* Pass Depth: {pass_depth_in:.4f} inches".ljust(width - 1) + "*")
    #lines.append(f"* Number of Passes: {passes}".ljust(width - 1) + "*")
    #lines.append(f"* Feed Rate: {feed_rate_ipm} ipm".ljust(width - 1) + "*")
    #lines.append(f"* Safe Clearance: {safe_clearance:.4f} inches".ljust(width - 1) + "*")
    #lines.append("*" * width)
    #lines.append("* Profile points (x (in), diameter (in)):" .ljust(width - 1) + "*")
    #for x, d in profile_points:
        #lines.append(f"*  x={x:.3f}, d={d:.4f}".ljust(width - 1) + "*")
    #lines.append("*" * width)
    #lines.append("")

    #lines.append("G21 ; Set units to millimeters")
    #lines.append("G90 ; Absolute positioning")
    #lines.append("G94 ; Feed rate per minute")
    #lines.append("M03 ; Spindle ON")
    #lines.append("")

    for p in range(1, passes + 1):
        removal = p * pass_depth_in * 2   # diameter removal
        lines.append(f"; Pass {p}, remove diameter: {removal:.4f} inches")
        start_rad = max((start_diameter - removal) / 2, finish_diameter / 2)
        safe_rad = start_rad + safe_clearance + tool_radius
        lines.append(f"G00 X{total_length:.4f} Y{safe_rad:.4f} ; Rapid to safe position")

        lines.append(f"G01 Y{start_rad + tool_radius:.4f} F{feed_rate_ipm} ; Move to cutting radius")

        for x in positions:
            d = finish_diameter if x < 0 else (diam_list[-1] if x > taper_length else linear_interpolate(x_vals, diam_list, x))
            d = max(d, finish_diameter)
            rad = max(d / 2, start_rad)
            lines.append(f"G01 X{x:.4f} Y{rad + tool_radius:.4f} F{feed_rate_ipm}")

        lines.append(f"G00 Y{safe_rad:.4f} ; Retract to safe clearance")
        lines.append("")

    lines.append("M05 ; Spindle OFF")
    lines.append(f"G00 X{-tail_extension:.4f} Y{(start_diameter / 2) + safe_clearance + tool_radius:.4f}")
    lines.append("M30 ; Program End")
    lines.append("%")

    return "\n".join(lines)

# Streamlit App
def generate_taper_gcode_with_finish_joint(
    profile_points,
    tool_diameter=0.625,
    spindle_speed=300,
    feed_rate=15,
    pass_depth=0.025,
    taper_length=29.0,
    start_diameter=1.0,
    finish_joint_diameter=0.9,
    tailstock_extension=2.0,
    headstock_extension=2.0,
    safe_y=0.2,
    step_x=0.25,
    verbose=False
):
    original_profile_points = sorted(profile_points, key=lambda p: p[0])
    x_vals, diam_vals_orig = zip(*original_profile_points)

    diam_vals = list(diam_vals_orig)
    if diam_vals[0] < finish_joint_diameter:
        if verbose:
            print(f"Clamping profile joint diameter from {diam_vals[0]:.4f}\" to finish_joint_diameter {finish_joint_diameter:.4f}\"")
        diam_vals[0] = finish_joint_diameter
    clamped_profile_points = list(zip(x_vals, diam_vals))

    total_length = tailstock_extension + taper_length + headstock_extension
    max_removal_tip = start_diameter - min(diam_vals)
    max_removal_joint = start_diameter - finish_joint_diameter
    max_total_removal = max(max_removal_tip, max_removal_joint)
    num_passes = int((max_removal_joint / (2 * pass_depth)) + 0.9999)

    if verbose:
        print("===== G-code Generation Summary =====")
        print(f"Start diameter: {start_diameter}\"")
        print(f"Finish joint diameter: {finish_joint_diameter}\"")
        print(f"Minimum profile diameter (original): {min(diam_vals_orig):.4f}\"")
        print(f"Minimum profile diameter (used): {min(diam_vals):.4f}\"")
        print(f"Tailstock extension: {tailstock_extension}\"")
        print(f"Headstock extension: {headstock_extension}\"")
        print(f"Taper length: {taper_length}\"")
        print(f"Pass depth (radial): {pass_depth}\"")
        print(f"Number of passes: {num_passes}")
        print(f"Safe Y clearance: {safe_y}\"")
        print(f"Tool diameter: {tool_diameter}\" (radius {tool_diameter/2:.4f}\")")
        print(f"Feed rate: {feed_rate} ipm")
        print(f"Spindle speed: {spindle_speed} rpm")
        print(f"Total programmed length: {total_length}\"")
        print("Original taper profile points:")
        for px, pd in original_profile_points:
            print(f"  X={px:.3f}\"  Diameter={pd:.4f}\"")
        print("=====================================")

    num_steps = int(total_length / step_x) + 1
    x_start = taper_length + headstock_extension
    x_end = -tailstock_extension
    x_points = [x_start - i * step_x for i in range(num_steps)]
    tool_radius = tool_diameter / 2.0

    header_lines = [
        "CNC Taper Cutting G-code generated by Phil Prentice",
        "Email: pipcues@gmail.com",
        "",
        f"Starting dowel diameter: {start_diameter:.4f}\"",
        f"Taper length: {taper_length:.4f}\"",
        f"Tailstock extension: {tailstock_extension:.4f}\"",
        f"Headstock extension: {headstock_extension:.4f}\"",
        f"Finish joint diameter: {finish_joint_diameter:.4f}\"",
        f"Pass depth (radial per pass): {pass_depth:.4f}\"",
        f"Total passes: {num_passes}",
        f"Tool diameter: {tool_diameter:.4f}\"",
        f"Feed rate: {feed_rate} ipm",
        f"Spindle speed: {spindle_speed} rpm",
        "",
        "Original taper profile points (X in inches, Diameter in inches):"
    ]

    for px, pd in original_profile_points:
        header_lines.append(f"  X={px:6.2f}\"   Diameter={pd:7.4f}\"")

    header_lines.extend([
        "",
        "Description:",
        "This program will machine a taper along the shaft based",
        "on the specified profile points. It will limit cutting",
        "so that the joint diameter finishes at the user-specified",
        "diameter, ensuring no overcut on the joint section.",
        "The taper is performed in multiple passes removing the",
        "specified pass depth radially each time."
    ])

    max_len = max(len(line) for line in header_lines)
    field_width = max_len + 2

    lines = []
    lines.append('%')
    lines.append('(************************************************************)')
    for line_text in header_lines:
        lines.append('( * {:<{width}})'.format(line_text, width=field_width))
    lines.append('(************************************************************)')
    lines.append('')

    lines.append('G20  ; Units in inches')
    lines.append('G90  ; Absolute positioning')
    lines.append('G94  ; Feed per minute mode')
    lines.append(f'M03 S{spindle_speed}  ; Spindle on clockwise')
    lines.append('')

    for i in range(1, num_passes + 1):
        diameter_removed = 2 * i * pass_depth
        if verbose:
            print(f"Starting pass {i} (Removing {diameter_removed:.4f}\" diameter)")

        lines.append(f'; ----------- PASS {i} -----------')
        lines.append(f'; Radial diameter removed this pass: {diameter_removed:.4f}"')
        lines.append(f'; Calculated cutting diameters will reflect this stock removal.')
        lines.append(f'; --------------------------------')

        if x_start > taper_length:
            profile_dia_tip = linear_interpolate(x_vals, diam_vals, taper_length)
            start_cut_dia = max(start_diameter - diameter_removed, profile_dia_tip)
        else:
            profile_dia_tip = linear_interpolate(x_vals, diam_vals, x_start)
            start_cut_dia = max(start_diameter - diameter_removed, profile_dia_tip)

        safe_y_start = (start_cut_dia / 2.0) + safe_y + tool_radius
        lines.append(f'; Rapid move to start position (tip + headstock extension) at safe Y clearance')
        lines.append(f'G00 X{x_start:.3f} Y{safe_y_start:.4f}  ; Move above cutting path with safe Y clearance')

        start_y_feed = (start_cut_dia / 2.0) + tool_radius
        lines.append(f'; Feed move down radially to cutting radius')
        lines.append(f'G01 Y{start_y_feed:.4f} F{feed_rate:.2f}  ; Move to cutting radius of diameter {start_cut_dia:.2f}"')

        for x in x_points:
            if x < 0:
                diam_profile = finish_joint_diameter
            elif x > taper_length:
                diam_profile = linear_interpolate(x_vals, diam_vals, taper_length)
            else:
                profile_dia_x = linear_interpolate(x_vals, diam_vals, x)
                diam_profile = max(profile_dia_x, finish_joint_diameter)

            cutting_dia = max(start_diameter - diameter_removed, diam_profile)
            y_feed = (cutting_dia / 2.0) + tool_radius
            lines.append(f'G01 X{x:.3f} Y{y_feed:.4f} F{feed_rate}  ; Cutting move at X={x:.3f}" with diameter {cutting_dia:.4f}"')

            if verbose and (abs(x % (step_x * 4)) < 1e-4 or abs(x - x_points[-1]) < 1e-4):
                print(f"  Cutting pass {i} at X={x:.3f}\" Y={y_feed:.4f}\" (diameter={cutting_dia:.4f}\")")

        safe_y_end_pos = (cutting_dia / 2.0) + safe_y + tool_radius
        lines.append('')
        lines.append(f'; Retract radially to safe Y clearance before rapid moves')
        lines.append(f'G00 Y{safe_y_end_pos:.4f}  ; Retreat to safe Y at end of pass')

        if verbose:
            print(f"Completed pass {i}, retracting to safe Y={safe_y_end_pos:.4f}\"")
            print("")

    lines.append('M05  ; Spindle stop')
    tailstock_safe_y = (start_diameter / 2.0) + safe_y + tool_radius
    lines.append(f'; Move to tailstock safe position before program end')
    lines.append(f'G00 X{x_end:.3f} Y{tailstock_safe_y:.4f}  ; Tailstock safe position')
    lines.append('M30  ; End of program')
    lines.append('%')

    if verbose:
        print("G-code generation complete.")

    return '\n'.join(lines)

def main():
    st.title("CNC Taper Generator Web App (Inches & IPM)")

    profile_points = get_profile_points()
    

    st.markdown("---")
    with st.expander("Machining Parameters"): 
        col1,col2 = st.columns(2)
        
        with col1:
            start_diameter = st.number_input("Starting Diameter (in inches)", value=1.0, min_value=0.01)
            finish_diameter = st.number_input("Finish Diameter (in inches, 0 = default to first profile)", value=0.0, min_value=0.0)
            if finish_diameter == 0.0:
                finish_diameter = profile_points[0][1]
            taper_length = st.number_input("Taper Length (in inches)", value=29.0, min_value=0.01)
            tail_extension = st.number_input("Tailstock Extension (in inches)", value=2.0, min_value=0.0)
            step = st.number_input("Step Size (inches)", value=0.25, min_value=0.001)
        with col2:
            head_extension = st.number_input("Headstock Extension (in inches)", value=2.0, min_value=0.0)
            tool_diameter = st.number_input("Tool Diameter (in inches)", value=0.625, min_value=0.01)
            pass_depth = st.number_input("Pass Depth (radial, in inches)", value=0.025, min_value=0.001)
            feed_rate = st.number_input("Feed Rate (inches per minute)", value=1000, min_value=1)
            safe_clearance = st.number_input("Safe Clearance (inches)", value=0.2, min_value=0.001)

    if st.button("Generate Taper & Preview"):

        # Plot taper profile
        fig = None
        try:
            fig = plot_mpl_3d(profile_points, taper_length)
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Error plotting taper profile: {e}")

        # Generate and display 3D model if possible
        if CADQUERY_AVAILABLE:
            try:
                model = build_cq_model(profile_points, taper_length, finish_diameter,
                                       start_diameter, tail_extension, head_extension)
                show(model)
            except Exception as e:
                st.write("Could not display 3D model due to:", e)
        else:
            st.info("CadQuery not installed; showing only taper plot.")

        # Generate G-code
        gcode = generate_gcode(profile_points, tool_diameter, feed_rate, pass_depth, start_diameter,
                               finish_diameter, taper_length, tail_extension, head_extension,
                               safe_clearance, step, verbose=True)

#       ''' gcode = generate_taper_gcode_with_finish_joint(
#            profile_points,
#            tool_diameter,
#            feed_rate,
#            pass_depth,
#            taper_length,
#            start_diameter,
#            finish_diameter,
#            tail_extension,
#            head_extension,
#            safe_clearance,
#            step,
#            verbose=True
#        )
        st.subheader("Generated G-code (first 50 lines):")
        st.text("\n".join(gcode.splitlines()[:50]))

        # Provide download button
        st.download_button("Download G-code", data=gcode, file_name="taper.nc", mime="text/plain")

if __name__ == "__main__":
    main()
