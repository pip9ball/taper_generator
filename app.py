import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Attempt to import CadQuery and visualization, mark availability
try:
    import cadquery as cq
    from cadquery import exporters
    from cadquery import show
    CADQUERY_AVAILABLE = True
except ImportError:
    CADQUERY_AVAILABLE = False

# Linear interpolation helper
def linear_interpolate(x_vals, y_vals, x):
    x_vals = np.array(x_vals)
    y_vals = np.array(y_vals)
    return np.interp(x, x_vals, y_vals)

def get_profile_points(default_points=None):
    with st.expander("Taper Profile Points"):
        #st.write("### Enter taper profile points (position in inches and diameter in inches)")

        if default_points is None:
            default_points = [(0.0, 0.840), (14.5, 0.65), (29.0, 0.508)]

        # Let user select number of points
        num_points = st.number_input("Number of points", min_value=2, max_value=20, value=len(default_points), step=1)

        positions = []
        diameters = []

        for i in range(num_points):
            col1, col2 = st.columns(2)
            with col1:
                pos = st.number_input(f"Point {i+1} position (inches)", value=default_points[i][0] if i < len(default_points) else 0.0, format="%.4f", step=0.01)
            with col2:
                dia = st.number_input(f"Point {i+1} diameter (inches)", value=default_points[i][1] if i < len(default_points) else 0.0, format="%.4f", step=0.01)

            positions.append(pos)
            diameters.append(dia)

        # Validate: positions must be strictly increasing
        if any(earlier >= later for earlier, later in zip(positions, positions[1:])):
            st.error("Positions must be in strictly increasing order.")
            return None

        # Validate: diameters positive and reasonable
        if any(d <= 0 for d in diameters):
            st.error("Diameters must be positive numbers.")
            return None

        profile_points = list(zip(positions, diameters))
        return profile_points


# Matplotlib-based 3D visualization fallback
def plot_mpl_3d(profile_points, taper_length):
    profile_points = sorted(profile_points, key=lambda p: p[0])
    x_vals, diameters = zip(*profile_points)
    x_fine = np.linspace(0, taper_length, 500)
    radii = np.interp(x_fine, x_vals, diameters) / 2

    theta = np.linspace(0, 2 * np.pi, 60)
    X, Theta = np.meshgrid(x_fine, theta)
    R = np.tile(radii, (len(theta), 1))

    Y = R * np.cos(Theta)
    Z = R * np.sin(Theta)

    fig = plt.figure(figsize=(10, 6))
    ax = fig.add_subplot(111, projection='3d')
    ax.plot_surface(X, Y, Z, color='lightblue', edgecolor='k', alpha=0.7)

    max_range = np.max([X.max() - X.min(), Y.max() - Y.min(), Z.max() - Z.min()]) / 2
    mid_x = (X.max() + X.min()) / 2
    mid_y = (Y.max() + Y.min()) / 2
    mid_z = (Z.max() + Z.min()) / 2
    ax.set_xlim(mid_x - max_range, mid_x + max_range)
    ax.set_ylim(mid_y - max_range, mid_y + max_range)
    ax.set_zlim(mid_z - max_range, mid_z + max_range)

    ax.set_xlabel('Axial Length (inches)')
    ax.set_ylabel('Radius Y (inches)')
    ax.set_zlabel('Radius Z (inches)')
    ax.set_title('Tapered Shaft Model (Matplotlib)')
    return fig

# CadQuery model builder
def build_cq_model(profile_points, taper_length, finish_diameter, start_diameter, tail_extension, head_extension):
    profile_points = sorted(profile_points, key=lambda p: p[0])
    x_vals, diameters = zip(*profile_points)
    diam_list = list(diameters)
    if diam_list[0] < finish_diameter:
        diam_list[0] = finish_diameter

    xs = [-tail_extension] + list(x_vals) + [taper_length + head_extension]
    rs = [diam_list[0] / 2] + [d / 2 for d in diam_list] + [diam_list[-1] / 2]

    points = list(zip(xs, rs))
    wp = cq.Workplane("XZ").polyline(points).line(xs[-1], 0).line(xs[0], 0).close()
    solid = wp.revolve(360)
    return solid

# Generate G-code text
def generate_gcode(profile_points, tool_diameter, feed_rate_ipm, pass_depth_in, start_diameter, finish_diameter, 
                   taper_length, tail_extension, head_extension, safe_clearance, step, verbose):

    x_vals, diameters = zip(*sorted(profile_points))
    diam_list = list(diameters)
    if diam_list[0] < finish_diameter:
        diam_list[0] = finish_diameter

    total_length = tail_extension + taper_length + head_extension
    passes = int(np.ceil((start_diameter - finish_diameter) / (2 * pass_depth_in)))
    positions = np.linspace(total_length, -tail_extension, int(total_length / step) + 1)
    tool_radius = tool_diameter / 2
    original_profile_points = sorted(profile_points, key=lambda p: p[0])
    spindle_speed = 300

    header_lines = [
        "CNC Taper Cutting G-code generated by Phil Prentice",
        "Email: pipcues@gmail.com",
        "",
        f"Starting dowel diameter: {start_diameter:.4f}\"",
        f"Taper length: {taper_length:.4f}\"",
        f"Tailstock extension: {tail_extension:.4f}\"",
        f"Headstock extension: {head_extension:.4f}\"",
        f"Finish joint diameter: {finish_diameter:.4f}\"",
        f"Pass depth (radial per pass): {pass_depth_in:.4f}\"",
        f"Total passes: {passes}",
        f"Tool diameter: {tool_diameter:.4f}\"",
        f"Feed rate: {feed_rate_ipm} ipm",
        f"Spindle speed: 300 rpm",
        "",
        "Original taper profile points (X in inches, Diameter in inches):"
    ]

    for px, pd in original_profile_points:
        header_lines.append(f"  X={px:6.2f}\"   Diameter={pd:7.4f}\"")

    header_lines.extend([
        "",
        "Description:",
        "This program will machine a taper along the shaft based",
        "on the specified profile points. It will limit cutting",
        "so that the joint diameter finishes at the user-specified",
        "diameter, ensuring no overcut on the joint section.",
        "The taper is performed in multiple passes removing the",
        "specified pass depth radially each time."
    ])

    max_len = max(len(line) for line in header_lines)
    field_width = max_len + 4

    lines = []
    lines.append('%')
    lines.append('(***********************************************************************)')
    for line_text in header_lines:
        lines.append('( * {:<{width}})'.format(line_text, width=field_width))
    lines.append('(***********************************************************************)')
    lines.append('')
                
    lines.append('G20  ; Units in inches')
    lines.append('G90  ; Absolute positioning')
    lines.append('G94  ; Feed per minute mode')
    lines.append(f'M03 S{spindle_speed}  ; Spindle on clockwise')
    lines.append('')

   
    for p in range(1, passes + 1):
        removal = p * pass_depth_in * 2   # diameter removal
        lines.append(f"; Pass {p}, remove diameter: {removal:.4f} inches")
        start_rad = max((start_diameter - removal) / 2, finish_diameter / 2)
        safe_rad = start_rad + safe_clearance + tool_radius
        lines.append(f"G00 X{total_length:.4f} Y{safe_rad:.4f} ; Rapid to safe position")

        lines.append(f"G01 Y{start_rad + tool_radius:.4f} F{feed_rate_ipm} ; Move to cutting radius")

        for x in positions:
            d = finish_diameter if x < 0 else (diam_list[-1] if x > taper_length else linear_interpolate(x_vals, diam_list, x))
            d = max(d, finish_diameter)
            rad = max(d / 2, start_rad)
            lines.append(f"G01 X{x:.4f} Y{rad + tool_radius:.4f} F{feed_rate_ipm}")

        lines.append(f"G00 Y{safe_rad:.4f} ; Retract to safe clearance")
        lines.append("")

    lines.append("M05 ; Spindle OFF")
    lines.append(f"G00 X{-tail_extension:.4f} Y{(start_diameter / 2) + safe_clearance + tool_radius:.4f}")
    lines.append("M30 ; Program End")
    lines.append("%")

    return "\n".join(lines)


def main():
    st.title("CNC Taper Generator Web App (Inches & IPM)")

    profile_points = get_profile_points()
    

    st.markdown("---")
    with st.expander("Machining Parameters"): 
        col1,col2 = st.columns(2)
        
        with col1:
            start_diameter = st.number_input("Starting Diameter (in inches)", value=1.0, min_value=0.01)
            finish_diameter = st.number_input("Finish Diameter (in inches, 0 = default to first profile)", value=0.0, min_value=0.0)
            if finish_diameter == 0.0:
                finish_diameter = profile_points[0][1]
            taper_length = st.number_input("Taper Length (in inches)", value=29.0, min_value=0.01)
            tail_extension = st.number_input("Tailstock Extension (in inches)", value=2.0, min_value=0.0)
            step = st.number_input("Step Size (inches)", value=0.25, min_value=0.001)
        with col2:
            head_extension = st.number_input("Headstock Extension (in inches)", value=2.0, min_value=0.0)
            tool_diameter = st.number_input("Tool Diameter (in inches)", value=0.625, min_value=0.01)
            pass_depth = st.number_input("Pass Depth (radial, in inches)", value=0.025, min_value=0.001)
            feed_rate = st.number_input("Feed Rate (inches per minute)", value=1000, min_value=1)
            safe_clearance = st.number_input("Safe Clearance (inches)", value=0.2, min_value=0.001)

    if st.button("Generate Taper & Preview"):

        # Plot taper profile
        fig = None
        try:
            fig = plot_mpl_3d(profile_points, taper_length)
            st.pyplot(fig)
        except Exception as e:
            st.error(f"Error plotting taper profile: {e}")

        # Generate and display 3D model if possible
        if CADQUERY_AVAILABLE:
            try:
                model = build_cq_model(profile_points, taper_length, finish_diameter,
                                       start_diameter, tail_extension, head_extension)
                show(model)
            except Exception as e:
                st.write("Could not display 3D model due to:", e)
        else:
            st.info("CadQuery not installed; showing only taper plot.")

        # Generate G-code
        gcode = generate_gcode(profile_points, tool_diameter, feed_rate, pass_depth, start_diameter,
                               finish_diameter, taper_length, tail_extension, head_extension,
                               safe_clearance, step, verbose=True)

#       ''' gcode = generate_taper_gcode_with_finish_joint(
#            profile_points,
#            tool_diameter,
#            feed_rate,
#            pass_depth,
#            taper_length,
#            start_diameter,
#            finish_diameter,
#            tail_extension,
#            head_extension,
#            safe_clearance,
#            step,
#            verbose=True
#        )
        st.subheader("Generated G-code (first 50 lines):")
        st.code("\n".join(gcode.splitlines()[:50]))

        # Provide download button
        st.download_button("Download G-code", data=gcode, file_name="taper.nc", mime="text/plain")

if __name__ == "__main__":
    main()




